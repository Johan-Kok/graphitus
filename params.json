{"name":"Graphitus","tagline":"A simple graphite based dashboard system","body":"Introduction\r\n============\r\nA simple, client-side, JSON-based [Graphite](http://graphite.wikidot.com/) logical-dashboard UI built with [bootstrap](http://twitter.github.com/bootstrap/) and [underscore.js](http://underscorejs.org/)\r\n\r\nInstallation\r\n============\r\nGraphitus is pure client side, all you have to do to run it is put it under a web-server that can serve HTTP requests.\r\n\r\nConfiguration\r\n=============\r\n\r\nGraphitus dashboards are defined using JSON notation. These configuration snippets can be stored in a document database like [couchdb](http://couchdb.apache.org/) or [mongo](http://www.mongodb.org/) and can also be files on the server.\r\n\r\nGraphitus Configuration\r\n-----------------------\r\n\r\nBelow is an example of global configuration (a file named ```config.json```) using static local JSON files (the dashboards ids are the file names with a ```.json``` extension):\r\n\r\n    \t{\r\n    \t\t\"graphiteUrl\": \"http://graphite.mysite.com\",\r\n    \t\t\"dashboardListUrl\": \"dashboard-index.json\",\r\n    \t\t\"dashboardUrlTemplate\": \"${dashboardId}.json\",\r\n    \t\t\"eventsUrl\": \"events.json\",\r\n    \t\t\"eventsDateFormat\": \"HH:mm:ss DD/MM/YYYY\",\r\n    \t\t\"eventsTimezone\": \"US/Eastern\",\r\n    \t\t\"timezones\": [\"US/Eastern\", \"US/Central\", \"US/Pacific\", \"Europe/London\", \"Israel\"]\r\n    \t}\r\n\r\nBelow is an example of global configuration (a file named ```config.json```) using couch db:\r\n\r\n    \t{\r\n    \t\t\"graphiteUrl\": \"http://graphite.mysite.com\",\r\n    \t\t\"dashboardListUrl\": \"http://couch.mysite.com:5984/graphitus-dashboards/_all_docs\", <-- must return a JSON with a \"rows\" element containing an array of rows with dashboard id (\"id\" attribute)\r\n    \t\t\"dashboardUrlTemplate\": \"http://couch.mysite.com:5984/graphitus-dashboards/${dashboardId}\",\r\n    \t\t\"eventsUrl\": \"events.json\",\r\n    \t\t\"eventsDateFormat\": \"HH:mm:ss DD/MM/YYYY\",\r\n    \t\t\"eventsTimezone\": \"US/Eastern\",\r\n    \t\t\"timezones\": [\"US/Eastern\", \"US/Central\", \"US/Pacific\", \"Europe/London\", \"Israel\"]\r\n    \t}\r\n\r\n\r\nDashboard Configuration\r\n-----------------------\r\n\r\nBelow is an example dashboard configuration:\r\n\r\n    \t{\r\n    \t\t\"title\": \"MySQL Production Cluster\", <-- give a title to page\t\r\n    \t\t\"columns\": 2, <-- the number of charts in a row side by side, mostly 2 or 4\r\n    \t\t\"user\": \"erezmazor\", <-- owner\t \r\n    \t\t\"timeBack\": 12h, <-- time range back from current time (can be expressed in minutes/hours/days/weeks e.g., 30m/12h/1d/2w)\t \r\n    \t\t\"from\": \"\", <-- start date for the date range, prefer timeBack as any date you choose will become stale\t \r\n    \t\t\"until\": \"\", <-- end date for the date range, prefer timeBack as any date you choose will become stale\t \r\n    \t\t\"width\": 700, <-- width of each chart image, should correlate with # columns defined\r\n    \t\t\"height\": 450,<-- height of each chart image\r\n    \t\t\"legend\": true, <-- show the legend in chart\r\n    \t\t\"refresh\": true, <-- auto refresh\r\n    \t\t\"refreshIntervalSeconds\": 90, <-- auto refresh interval in seconds\r\n    \t\t\"averageSeries\": false, <-- for targets that aggregate a lot of metrics prefer setting this to true as it will average many lines into one\r\n    \t\t\"defaultLineWidth\": 2, <-- line width for chart lines\r\n            \"tz\" : \"US/Eastern\", <-- timezone for the rendered graph\r\n    \t\t\"data\": [ <-- charts list\r\n    \t\t\t{\r\n    \t\t\t\t\"title\": \"Slow Queries\", <-- a title for the chart image\r\n    \t\t\t\t\"target\": \"groupByNode(machines.${dc}dc1.mysql*.Slow_queries,2,\\\"nonNegativeDerivative\\\")\", <-- the graphite target/function which defines the chart content\r\n                    \"params\": \"areaMode=stacked&lineMode=staircase&colorList=blue,red,green\" <-- specify additional parameters for this target\r\n    \t\t\t},{\r\n    \t\t\t\t\"title\": \"Seconds Behind Master\",\r\n    \t\t\t\t\"target\": \"groupByNode(machines.${dc}dc1.mysql*.Seconds_Behind_Master,2,\\\"averageSeries\\\")\"\r\n    \t\t\t},{\r\n    \t\t\t\t\"title\": \"Queries Per Second\",\r\n    \t\t\t\t\"target\": [ <-- you can specify mutliple targets for a chart as a JSON array\r\n                        \"derivative(machines.${dc}dc1.mysql*.Qps1)\",\r\n                        \"derivative(machines.${dc}dc1.mysql*.Qps2)\"\r\n                    ],\r\n                    \"description\" : \"The number of queries per second executed by the server\" <-- show a description tooltip next to the title\r\n    \t\t\t}\r\n    \t\t\t],\r\n    \t\t\t\"parameters\": { <-- parameters to tokens expressed in targets with ${paramName} format\t\r\n    \t\t\t\t\"datacetner\" : { <-- label for a select box in the UI\r\n    \t\t\t\t\"All\": {\t <-- display name for a select box in the UI\r\n    \t\t\t\t\t\"dc\": \"*\" <-- the token name (dc) as specified in the target name and the actual token value (*)\t\t\t\r\n    \t\t\t\t},\r\n    \t\t\t\t\"New York\": {\t\t \r\n    \t\t\t\t\t\"dc\": \"ny\" \r\n    \t\t\t\t},\r\n    \t\t\t\t\"LA\": {\r\n    \t\t\t\t\t\"dc\": \"la\"\r\n    \t\t\t\t},\r\n    \t\t\t\t\"Chicago\": {\r\n    \t\t\t\t\t\"dc\": \"chi\"\r\n    \t\t\t\t}\r\n    \t\t\t}\r\n    \t\t}\r\n\r\n* Below is a screenshot of a sample dashboard:\r\n\r\n![Screenshot](https://raw.github.com/erezmazor/graphitus/master/doc/screenshot.png)\r\n\r\n* Clicking on a graph image will generate a nice [Rickshaw](http://code.shutterstock.com/rickshaw/)-based graph with hover-values and a toggle-legend\r\n\r\n![Extended](https://raw.github.com/erezmazor/graphitus/master/doc/extended.png)\r\n\r\n* Clicking on a the ```histogram``` button (![Histogram](https://raw.github.com/erezmazor/graphitus/master/doc/histogram.png)) will generate a [D3 Histogram](https://github.com/mbostock/d3/wiki/Histogram-Layout)\r\n\r\n![Histogram](https://raw.github.com/erezmazor/graphitus/master/doc/histogram-lightbox.png)\r\n\r\n* Clicking on a the ```source``` button (![Source](https://raw.github.com/erezmazor/graphitus/master/doc/source.png)) will show the target source and allow you to edit it in place\r\n\r\n![Source Editor](https://raw.github.com/erezmazor/graphitus/master/doc/source-editor.png)\r\n\r\n* Clicking on a the ```functions``` button (![Functions](https://raw.github.com/erezmazor/graphitus/master/doc/functions.png)) will show some options for manipulating the graph using the [Graphite URL API](http://graphite.readthedocs.org/en/1.0/url-api.html)\r\n\r\n![Function Options](https://raw.github.com/erezmazor/graphitus/master/doc/functions-drop.png)\r\n\r\n* Clicking on a the ```images``` button (![Images](https://raw.github.com/erezmazor/graphitus/master/doc/images.png)) will show a drop down with permalinks to the image in small, medium and large sizes (useful for sending links or copying images into email)\r\n\r\n![Images](https://raw.github.com/erezmazor/graphitus/master/doc/images-drop.png)\r\n\r\n* Clicking on a the ```graphlot``` button (![Graphlot](https://raw.github.com/erezmazor/graphitus/master/doc/graphlot.png)) will redirect you to the graph's ```Graphlot``` page in your graphite server.\r\n\r\n\r\nsupplying an ```eventsUrl``` attribute in config.json will allow you to draw an events overlay on the rickshaw graph, events must be in the following JSON format:\r\n\r\n    [\r\n\t\t{\r\n    \t\t\"message\": \"this is an event message\",\r\n\t\t\t\"start\": \"15:31:35 28/03/2013\",\r\n\t\t\t\"end\": \"15:33:47 28/03/2013\"\r\n\t\t},\r\n        {\r\n    \t\t\"message\": \"this is an event message\",\r\n\t\t\t\"start\": \"15:31:35 28/03/2013\",\r\n\t\t\t\"end\": \"15:33:47 28/03/2013\"\r\n\t\t}\r\n\t]\r\n\r\n* Override configuration with URL parameters\r\n\r\nYou can specify configuration properties in the dashboard URL to override default settings:\r\n\r\n        dashboard.html?id=grp1.dash1&defaultLineWidth=25&timeBack=20m&width=350&height=400&columns=4&legend=false\r\n        \r\nYou can also specify parameter values in the URL:\r\n\r\n        dashboard.html?id=grp1.dash1&datacenter=LA\r\n        \r\nConfiguration attributes\r\n------------------------\r\n\r\nParameter              | Required?       | Description\r\n---------------------- | --------------- | ---------------------------------\r\ntitle                   | Yes             | The title of the dashboard chart\r\ncolumns                 | Yes             | The number of images in a row\r\nuser                    | No              | Owner\r\ntimeBack                | No              | Specify timeframe back from current time to display (specify this or ```from``` and ```until```), shorthand format e.g., ```15m```, ```24h```, ```7d```, ```1w```\r\nfrom                    | No              | From date/time in ```yyyy-MM-dd HH:MM``` (specify this and ```until``` or ```timeBack```)\r\nuntil                   | No              | To date/time in ```yyyy-MM-dd HH:MM``` (specify this and ```from``` or ```timeBack```)\r\nwidth                   | Yes             | Width of the chart from graphite (see ```columns```)\r\nheight                  | Yes             | Height of the chart from graphite\r\nlegend                  | No              | Show/Hide the legend in the chart (omitting leaves it up to graphite)\r\nrefresh                 | No              | Auto-refresh the charts (see ```refreshIntervalSeconds```)\r\nrefreshIntervalSeconds  | No              | When ```refresh``` is ```true``` this will determine the refresh interval\r\ndefaultLineWidth        | No              | The line width for the generated chart\r\ntz                      | No              | The timezone for the rendered graphite images (see [Timezone list](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones)). Note: timezone resolution is in the following order url, json configuraiton file, cookie, default.\r\n\r\n* Dynamic Parameters\r\n\r\nDynamic parameters allow you to define metric selection and filtering based on dynamic graphite metric API queries. Structuring your graphite metrics tree properly can be useful to create such dashboaards.\r\n\r\nConsider the following configuration for the ```parameters``` section of the configuration\r\n\r\n        \"service\": {\r\n            \"type\": \"dynamic\",\r\n            \"query\": \"services.prod.*\",\r\n            \"index\": 2,\r\n            \"showAll\": false\r\n        }, \r\n         \"host\": {\r\n            \"type\": \"dynamic\",\r\n            \"query\": \"services.prod.${service}.*\",\r\n            \"index\": 3,\r\n            \"regex\": \"(.*)_\",\r\n            \"showAll\": true\r\n        }, \r\n         \"datacenter\": {\r\n            \"type\": \"dynamic\",\r\n            \"query\": \"services.prod.${service}.${host}_*\",\r\n            \"index\": 3,\r\n            \"regex\": \"_(.*)\",\r\n            \"showAll\": true,\r\n            \"showAllValue\": \"host-10000*\"\r\n        }\r\n        \r\nYou can then use a target like ```services.prod.${service}.${host}_${datacenter}.someAttribute```. When graphitus loads it will generate select boxes based on the actual values returned from the graphite metric API based on the provided queries. Note that the queries themselves can be parameterized, creating a series of select boxes depending on each other in-order.\r\n\r\nGraphitus will also consider generating the list of values from a partial path, the index and regex determine which portion and substring (regex) of the resulting path will be used to generate the values for selection. The ```showAll``` property is used to determine if graphitus will prepend a default All (translated to ```*``` in the graphite query) option to the selection. The ```showAllValue``` parameter can be added to override the default ```*``` selection for complex name filtering schemes (you can have token in this value to express dependencies on other parameters).\r\n\r\n\r\n* Timezone support\r\n\r\nGraphitus supports timezones via configuration ```config.json``` has a ```timezones``` attributes which accepts an array. These are timezones supported by the [Graphite URL API Timezone parameter](https://graphite.readthedocs.org/en/latest/render_api.html#tz). Timezones are supported using the [moment-timezone](http://momentjs.com/timezone/) library. In order to correctly define timezones use the [moment-timezone data builder](http://momentjs.com/timezone/data/) to customize your own ```js/moment-timezone-data.js``` file. Note that moment zone names are different from graphite names, once you generate the ```js/moment-timezone-data.js``` file edit it and change timezone names to correspond to the supported graphite names.\r\n\r\n* More info and examples\r\n\r\n- [Blog post](http://techo-ecco.com/blog/monitoring-apache-hadoop-cassandra-and-zookeeper-using-graphite-and-jmxtrans)\r\n- [Cassandra Servers Dashboard](https://gist.github.com/erezmazor/5019989#file-cassandra-servers)\r\n- [Cassandra Server Internals Dashboard](https://gist.github.com/erezmazor/5019989#file-cassandra-servers-internals)\r\n- [Cassandra Per-Column Family Dashboard](https://gist.github.com/erezmazor/5019989#file-cassandra-column-families)\r\n- [Hadoop NameNode Dashboard](https://gist.github.com/erezmazor/5020008#file-hadoop-namenode)\r\n- [Hadoop Jobtracker Dashboard](https://gist.github.com/erezmazor/5020008#file-hadoop-jobtracker)\r\n- [Hadoop TaskTracker Dashboard](https://gist.github.com/erezmazor/5020008#file-hadoop-tasktracker)\r\n- [Hadoop DataNode Dashboard](https://gist.github.com/erezmazor/5020008#file-hadoop-datanode)\r\n- [Zookeeper Dashbaord](https://gist.github.com/erezmazor/5020016#file-zookeeper-servers)\r\n\r\n","google":"UA-36660869-1","note":"Don't delete this file! It's used internally to help with page regeneration."}